### Der Datensatz ist in Form einer Dataframe darzustellen.
## Alter:
#wir haben einfach einen Vektor erstellet mit den Alter, sodass sie normal verteilt sind.
alter = round(rnorm(100,sd= 2,mean = 25))
##Studienfach:
#Analoge zum Alter aber wir haben statistik und Data Science mehrmals geschrieben um "haufiger"
#zu simulieren
fach = c(rep("Statistik",5),rep("Data Science",5),"Mathe",
rep("Informatik",3))
studienfach = sample(fach,100,replace = TRUE)
##Interesse_an_mathematik:
# Zusammenhang zwischen den Fachstudiengaengen und dem Interesse an Mathematik:
# absteigende Sortierung: - Mathematik
#                         - Statistik
#                         - Data Science
#                         - Informatik
#Normalerweiser magen die Studenten, derjenigen mathe studieren, deswegen h√∂rere Anzahlen haufiger
#vorkommen. Dann nutzen wir dies neu Vektor um das Interesse an Mathe auf die Leute verteilen, die
#mathe  studieren
mathe_mathe = c(rep(1,1),rep(1,2),rep(3,3),rep(4,6),rep(5,7),rep(6,7),rep(7,6))
mathe_mathe.final = sample(mathe_mathe,size = length(which(studienfach =="Mathe")),
replace = TRUE)
#Idr magen die Informatiker*innen Mathe veniger als derjenigen, die Mathe studieren.
mathe_info = c(rep(7,1), rep(6,1), rep(5,3), rep(4,6), rep(3,7), rep(2,7),rep(1,6))
mathe_info.final = sample(mathe_info,size = length(which(studienfach =="Informatik")),
replace = TRUE)
# Statistik ist analog verteilt
mathe_stat = c(rep(1,2),rep(1,3),rep(3,4),rep(4,7),rep(5,6),rep(6,6),rep(7,5))
mathe_stat.final = sample(mathe_stat,size = length(which(studienfach =="Statistik")),
replace = TRUE)
# Data sience ist auch analog verteilt
mathe_ds = c(rep(1,2),rep(1,3),rep(3,4),rep(4,7),rep(5,6),rep(6,6),rep(7,5))
mathe_ds.final = sample(mathe_stat,size = length(which(studienfach =="Data Science")),
replace = TRUE)
#Am Ende bekommen wir dies Vektor.
Interesse_an_Mathematik = rep(0,100)
Interesse_an_Mathematik[which(studienfach=="Mathe")] = mathe_mathe.final
Interesse_an_Mathematik[which(studienfach=="Informatik")] = mathe_info.final
Interesse_an_Mathematik[which(studienfach=="Data Science")] = mathe_ds.final
Interesse_an_Mathematik[which(studienfach=="Statistik")] = mathe_stat.final
## Interesse_an_programmieren
#Analog zum Inderesse_an_mathematik
prog_mathe = c(rep(7,1), rep(6,1), rep(5,3), rep(4,6), rep(3,7), rep(2,7),rep(1,6))
prog_mathe.final = sample(prog_mathe,size = length(which(studienfach =="Mathe")),
replace = TRUE)
prog_info = c(rep(1,1),rep(1,2),rep(3,3),rep(4,6),rep(5,7),rep(6,7),rep(7,6))
prog_info.final = sample(prog_info,size = length(which(studienfach =="Informatik")),
replace = TRUE)
prog_stat = c(rep(1,2),rep(1,3),rep(3,4),rep(4,7),rep(5,6),rep(6,6),rep(7,5))
prog_stat.final = sample(prog_stat,size = length(which(studienfach =="Statistik")),
replace = TRUE)
prog_ds = c(rep(1,2),rep(1,3),rep(3,4),rep(4,7),rep(5,6),rep(6,6),rep(7,5))
prog_ds.final = sample(prog_stat,size = length(which(studienfach =="Data Science")),
replace = TRUE)
#final:
Interesse_an_Programmieren = rep(0,100)
Interesse_an_Programmieren[which(studienfach=="Mathe")] = prog_mathe.final
Interesse_an_Programmieren[which(studienfach=="Informatik")] = prog_info.final
Interesse_an_Programmieren[which(studienfach=="Data Science")] = prog_ds.final
Interesse_an_Programmieren[which(studienfach=="Statistik")] = prog_stat.final
##Mathe_LK:
mathe_LK = sample(c("Ja","Nein"),100,TRUE)
#_______________________________________________________________________________
#Dataframe:
datensatz=data.frame(Alter = alter ,Studienfach = studienfach ,
Interesse_an_Mathematik = Interesse_an_Mathematik,
Interesse_an_Programmieren = Interesse_an_Programmieren,
Mathe_LK = mathe_LK)
write.csv(datensatz,'Datensatz.csv')
datensatz
#e)
#Eine Funktion fuer die Beschreibung verschiedene ordinale Variablen
setwd("~/Desktop/")
#e)
#Eine Funktion fuer die Beschreibung verschiedene ordinale Variablen
daten  = read.csv(datensatz)
#e)
#Eine Funktion fuer die Beschreibung verschiedene ordinale Variablen
daten  = read.csv(file = datensatz)
#e)
#Eine Funktion fuer die Beschreibung verschiedene ordinale Variablen
daten  = read.csv(file = datensat.csv)
library(readr)
Datensatz <- read_csv("E:/Users/moez/Desktop/Datensatz.csv")
View(Datensatz)
fuer die Beschreibung verschiedene ordinale Variablen
library(readr)
Datensatz <- read_csv("E:/Users/moez/Desktop/Datensatz.csv")
View(Datensatz)
View(Datensatz$Alter)
View(Datensatz$Alter[Datensatz$Alter>26])
View(length(Datensatz$Alter[Datensatz$Alter>26]))
length(Datensatz$Alter[Datensatz$Alter>26])
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20]="jung",
Datensatz$Alter[Datensatz$Alter>=20 && Datensatz$Alter<=26] = "zwichenstufe",
Datensatz$Alter[Datensatz$Alter>26]="alt")
length(Datensatz$Alter[Datensatz$Alter>26])
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20],
Datensatz$Alter[Datensatz$Alter>=20 && Datensatz$Alter<=26],
Datensatz$Alter[Datensatz$Alter>26],)
names(alterkategorisiert)= c("jung","zwichenstufe","alt")
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20],
Datensatz$Alter[Datensatz$Alter>=20 && Datensatz$Alter<=26],
Datensatz$Alter[Datensatz$Alter>26],)
names(alterkategorisiert)= c("jung","zwichenstufe","alt")
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20],
Datensatz$Alter[Datensatz$Alter>=20 && Datensatz$Alter<=26],
Datensatz$Alter[Datensatz$Alter>26],)
names(alterkategorisiert)= c("jung","zwichenstufe","alt")
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20],
Datensatz$Alter[Datensatz$Alter>=20 && Datensatz$Alter<=26],
Datensatz$Alter[Datensatz$Alter>26],)
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20],
Datensatz$Alter[Datensatz$Alter>26],)
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20],
Datensatz$Alter[Datensatz$Alter>=20 && Datensatz$Alter<=26],
Datensatz$Alter[Datensatz$Alter>26],)
alterkategorisiert = c(Datensatz$Alter[Datensatz$Alter<20])
Datensatz$Alter[Datensatz$Alter<20]
zabbi = Datensatz$Alter[Datensatz$Alter<20]
zabbi = Datensatz$Alter
[Datensatz$Alter<20]
zabbi = Datensatz$Alter[Datensatz$Alter<20]
zabbi = length(Datensatz$Alter[Datensatz$Alter<20])
zabbi = Datensatz$Alter[Datensatz$Alter<=20]
zabbi = Datensatz$Alter[Datensatz$Alter<20]
alterkategorisiert = c(length(Datensatz$Alter[Datensatz$Alter<=20]),
length(Datensatz$Alter[Datensatz$Alter>20 && Datensatz$Alter<=26]),
length(Datensatz$Alter[Datensatz$Alter>26]))
names(alterkategorisiert)= c("jung","zwichenstufe","alt")
view(alterkategorisiert)
alterkategorisiert
zabbi = Datensatz$Alter[Datensatz$Alter<=20]
alterkategorisiert = c(length(Datensatz$Alter[Datensatz$Alter<=20]),
length(Datensatz$Alter[Datensatz$Alter>20 & Datensatz$Alter<=26]),
length(Datensatz$Alter[Datensatz$Alter>26]))
names(alterkategorisiert)= c("jung","zwichenstufe","alt")
alterkategorisiert
anzahlinfo = length(Datensatz$Studienfach == "Informatik")
anzahlmathe= length(Datensatz$Studienfach == "Mathe")
anzahlmathe= length(Datensatz$Studienfach = "Mathe")
anzahlinfo
anzahlinfo = length(Datensatz$Studienfach[Datensatz$Studienfach == "Informatik"])
anzahlmathe= length(Datensatz$Studienfach[Datensatz$Studienfach == "Mathe"])
anzahlinfo
anzahlinfo
anzahlmathe
mathekategorisiert = c(length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 ]),
length(Datensatz$Alter[Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4]),
length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5]))
mathekategorisiert_pro = c(((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 ])*anzahlmathe)/100),
((length(Datensatz$Alter[Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4])*anzahlmathe)/100),
((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5])*anzahlmathe)/100))
mathekategorisiert = c(length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe"]),
length(Datensatz$Alter[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4) & Datensatz$Studienfach=="Mathe"] ),
length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5 & Datensatz$Studienfach=="Mathe"]))
mathekategorisiert_pro = c(((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe" ])*anzahlmathe)/100),
((length(Datensatz$Alter[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4)& Datensatz$Studienfach=="Mathe"])*anzahlmathe)/100),
((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5& Datensatz$Studienfach=="Mathe"])*anzahlmathe)/100))
Datensatz
level(Datensatz)
lvl(Datensatz)
anzahlmathe
anzahlinfo
mathekategorisiert = c(length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe"]),
length(Datensatz$Alter[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4) & Datensatz$Studienfach=="Mathe"] ),
length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5 & Datensatz$Studienfach=="Mathe"]))
mathekategorisiert_pro = c(((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe" ])*100)/anzahlmathe),
((length(Datensatz$Alter[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4)& Datensatz$Studienfach=="Mathe"])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5& Datensatz$Studienfach=="Mathe"])*100)/anzahlmathe))
mathekategorisiert = c(length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe"]),
length(Datensatz$Interesse_an_Mathematik[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4) & Datensatz$Studienfach=="Mathe"] ),
length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5 & Datensatz$Studienfach=="Mathe"]))
mathekategorisiert_pro = c(((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe" ])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Mathematik[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4)& Datensatz$Studienfach=="Mathe"])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5& Datensatz$Studienfach=="Mathe"])*100)/anzahlmathe))
infokategorisiert = c(length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren <= 2 & Datensatz$Studienfach=="Informatik"]),
length(Datensatz$Interesse_an_Programmieren[(Datensatz$Interesse_an_Programmieren==3 | Datensatz$Interesse_an_Programmieren==4) & Datensatz$Studienfach=="Informatik"] ),
length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren>=5 & Datensatz$Studienfach=="Informatik"]))
infokategorisiert_pro = c(((length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren <= 2 & Datensatz$Studienfach=="Informatik" ])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Programmieren[(Datensatz$Interesse_an_Programmieren ==3 | Datensatz$Interesse_an_Programmieren==4)& Datensatz$Studienfach=="Informatik"])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren>=5& Datensatz$Studienfach=="Informatik"])*100)/anzahlmathe))
infokategorisiert_pro = c(((length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren <= 2 & Datensatz$Studienfach=="Informatik" ])*100)/anzahlinfo),
((length(Datensatz$Interesse_an_Programmieren[(Datensatz$Interesse_an_Programmieren ==3 | Datensatz$Interesse_an_Programmieren==4)& Datensatz$Studienfach=="Informatik"])*100)/anzahlinfo),
((length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren>=5& Datensatz$Studienfach=="Informatik"])*100)/anzahlinfo))
mathekategorisiert = c(length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe"]),
length(Datensatz$Interesse_an_Mathematik[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4) & Datensatz$Studienfach=="Mathe"] ),
length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5 & Datensatz$Studienfach=="Mathe"]))
names(mathekategorisiert) = c("niedrig","mittel","hoch")
mathekategorisiert_pro = c(((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik <= 2 & Datensatz$Studienfach=="Mathe" ])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Mathematik[(Datensatz$Interesse_an_Mathematik ==3 | Datensatz$Interesse_an_Mathematik==4)& Datensatz$Studienfach=="Mathe"])*100)/anzahlmathe),
((length(Datensatz$Interesse_an_Mathematik[Datensatz$Interesse_an_Mathematik>=5& Datensatz$Studienfach=="Mathe"])*100)/anzahlmathe))
names(mathekategorisiert_pro) = c("niedrig","mittel","hoch")
infokategorisiert = c(length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren <= 2 & Datensatz$Studienfach=="Informatik"]),
length(Datensatz$Interesse_an_Programmieren[(Datensatz$Interesse_an_Programmieren==3 | Datensatz$Interesse_an_Programmieren==4) & Datensatz$Studienfach=="Informatik"] ),
length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren>=5 & Datensatz$Studienfach=="Informatik"]))
names(infokategorisiert) = c("niedrig","mittel","hoch")
infokategorisiert_pro = c(((length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren <= 2 & Datensatz$Studienfach=="Informatik" ])*100)/anzahlinfo),
((length(Datensatz$Interesse_an_Programmieren[(Datensatz$Interesse_an_Programmieren ==3 | Datensatz$Interesse_an_Programmieren==4)& Datensatz$Studienfach=="Informatik"])*100)/anzahlinfo),
((length(Datensatz$Interesse_an_Programmieren[Datensatz$Interesse_an_Programmieren>=5& Datensatz$Studienfach=="Informatik"])*100)/anzahlinfo))
names(infokategorisiert_pro) = c("niedrig","mittel","hoch")
alterdf = data.frame(alterkategorisiert)
alterdf
mathedf = data.frame(mathekategorisiert,mathekategorisiert_pro)
mathedf
mathetab = table(mathekategorisiert,mathekategorisiert_pro)
mathetab
mathetab = table(mathekategorisiert)
mathetab
mathedt_t = as.data.frame(t(as.matrix(mathedf)))
mathedt_t
mathedf_t = as.data.frame(t(as.matrix(mathedf)))
infodf = data.frame(infokategorisiert,infokategorisiert_pro)
infodf_t= as.data.frame(t(as.matrix(infodf)))
infodf_t
infokategorisiert
infodf = data.frame(as.int(infokategorisiert),infokategorisiert_pro)
infodf = data.frame(as.integer(infokategorisiert),infokategorisiert_pro)
infodf_t= as.data.frame(t(as.matrix(infodf)))
infodf_t
alterdf
library(readr)
#install.packages("vcd")
library(MASS)
library(vcd)
# a) Die Funktion lagemasse berechnet ein paar Lagemassen fuer metrische Merkmale.
# Input:  dataframe, default:  unseres Datensatzes
#Output:  liste enthaelt: - arithmetisches Mittel vom Alter
#                         - Modus vom Interesse an Mathematik
#                         - geometrisches Mittel vom Interesse an Prog.
lagemasse = function(x = datensatz){
arith.mittel = 1/length(which(!is.na(Datensatz$Alter))) *
sum(Datensatz$Alter,rm.na = TRUE)
modus = which.max(Datensatz$Interesse_an_Mathematik)
geom.mittel =    prod(Datensatz$Alter,rm.na = TRUE) ^
1/length(which(!is.na(Datensatz$Alter)))
return(list(arithmetisches.Mittel = arith.mittel,
Modus = modus ,
geometrisches.Mittel = geom.mittel))
}
#c)
#Funktion fuer die Beschreibung von Zusammenhangsmasse
#Eingabe: Data Frame, von interesse sind Spalten Mathe_LK(character), Studienfach(character), Interesse_an_Mathematik(numeric), Interesse_an_Programmieren(numeric)
#Ausgabe: Vektor von characters, der Beschreibt Zusammenhang zwischen 4 Beobachtungspaare
#         1. Zusammengang zwischen Studienfach und die Tatsache, dass Person Mathe-LK hatte
#         2. Zusammengang zwischen Interesse an Mathematik und Studienfach
#         3. Zusammengang zwischen Interesse an Programmieren und Studienfach
#         4. Korrelation zwischen Interesse an Mathematik und Interesse an Programmieren
#         Fuer jede zusammengangspaare gibt es Liste mit drei Koeffizienten und Interpretation dazu
#Funktion Beschreibt 4 Zusammenhang zwischen 4 Beobachtungspaare:
#Fuer 1-3. Zusammenhangspaare erstellt die Funktion fuer jede Paare eine Liste mit
# Pearson Kontingenzindex, Korrigierte Pearson Kontingenzindex und Crammers Kontingenzindex,
#fuer jeden Index gibt es Interpretation
#Fuer 4. Zusammenhangspaare erstellt die Funktion fuer jede Paare eine Liste mit
#Spearman Rangkorellationskoeffizient, Kendall`sche` Rangkorellationskoeffizient,
#Pearson Korellationskoeffizient; fuer jeden Index gibt es Interpretation.
zusammenhangsmasse <- function(x){
ausgabe <- list()
for(k in 1:3){
if(k==1)  table <- table(x$Mathe_LK, x$Studienfach) #Zusammenhang zwischen Studienfach und die Tatsache, dass Person Mathe-LK hatte
else if(k==2) table <- table(x$Studienfach, x$Interesse_an_Mathematik)#Zusammenhang zwischen Studienfach und Interesse an Mathematik
else table <- table(x$Studienfach, x$Interesse_an_Programmieren)#Zusammenhang zwischen Studienfach und Interesse an Programmieren
expected <-expect(table)  #Berechnen Erwartunghaeufigkeit
table <- as.matrix(table)
expected<- as.matrix(expected)
n <- sum(table)
chi.sq <- 0
# Berechnen chi-quadrat
for(i in 1:nrow(table)){
for(j in 1:ncol(table)){
chi.sq <- chi.sq + ((table[i,j] - expected[i,j])^2 / expected[i,j])
}
}
pearson  <- sqrt(chi.sq/(chi.sq+n)) #Pearson Kontingenzindex
kor_pearson <- sqrt(min(ncol(table), nrow(table))/(
min(ncol(table), nrow(table)) - 1)) * pearson #Korrigierte Pearson Kontingenzindex
cramer <- chi.sq/((min(ncol(table), nrow(table)) - 1) * n) #Crammers Kontingenzindex
ausgabe[[k]]<- c(pearson, kor_pearson, cramer)
}
interpret <- list(c(),c(),c())
test <- c("Studienfach und die Tatsache, dass Person Mathe-LK hatte",
"Interesse an Mathematik und Studienfach",
"Interesse an Programmieren und Studienfach")
#Erstellen Vektor mit Interpretation fuer jeder Index
for(l in 1:3){
for(i in 1:3){
if(ausgabe[[l]][i]<=0.1) interpret[[l]][i] <-paste( "Es besteht kein Zusammenhang zwischen ", test[l])
else if(ausgabe[[l]][i]>0.1 && ausgabe[[l]][i]<0.4)interpret[[l]][i] <- paste("Es besteht sehr niedriger Zusammenhang zwischen ", test[l])
else if(ausgabe[[l]][i]>=0.4 && ausgabe[[l]][i]<=0.6)interpret[[l]][i] <- paste("Es besteht mittlerer Zusammenhang ",test[l])
else if(ausgabe[[l]][i]>0.6 && ausgabe[[l]][i]<0.9)interpret[[l]][i] <- paste("Es besteht ganz starke Zusammenhang", test[l])
else if(ausgabe[[l]][i]>=0.9)interpret[[l]][i] <- paste(" Es besteht absoluten Zusammenhang zwischen ",test[l])
}
}
rangkor <- c()
rangkor[1] <- cor(x$Interesse_an_Mathematik, Interesse_an_Programmieren, method = "spearman") #Spearman Rangkorellationskoeffizient
rangkor[2] <- cor(x$Interesse_an_Mathematik, Interesse_an_Programmieren, method = "kendal") #Kendall`sche Rangkorellationskoeffizient
rangkor[3] <- cor(x$Interesse_an_Mathematik, Interesse_an_Programmieren, method = "pearson") #Pearson Korellationskoeffizient
interpret_rangcor <- c()
vorzeichen <- "positive "
#Erstellen Vektor mit Interpretation fuer jeder Index
for(i in 1:3){
if (rangkor[i] < 0) vorzeichen <- "negative "
if(rangkor[i]<=0.1) interpret_rangcor[i] <-paste( "Es gibt keine Korellation zwischen Interesse an Mathematik und Interesse an Programmieren")
else if(rangkor[i]>0.1 && rangkor[i]<0.4)interpret_rangcor[i] <- paste("Es gibt sehr niedrige", vorzeichen, "Korellation zwischen Interesse an Mathematik und Interesse an Programmieren")
else if(rangkor[i]>=0.4 && rangkor[i]<=0.6)interpret_rangcor[i] <- paste("Es gibt mittlere", vorzeichen, "Korellation zwischen Interesse an Mathematik und Interesse an Programmieren")
else if(rangkor[i]>0.6 && rangkor[i]<0.9)interpret_rangcor[i] <- paste("Es gibt ganz starke", vorzeichen, "Korellation zwischen Interesse an Mathematik und Interesse an Programmieren")
else if(rangkor[i]>=0.9)interpret_rangcor[i] <- paste("Es gibt absolute", vorzeichen, "Korellation zwischen Interesse an Mathematik und Interesse an Programmieren")
vorzeichen <- "positive "
}
return(c("Zusammengang zwischen Studienfach und die Tatsache, dass Person Mathe-LK hatte",
list("Pearson Kontingenzindex" = (paste(ausgabe[[1]][1], " => ", interpret[[1]][1])),
"Korrigierte Pearson Kontingenzindex"  = (paste(ausgabe[[1]][2], " => ", interpret[[1]][2])),
"Crammers Kontingenzindex" = (paste(ausgabe[[1]][3], " => ", interpret[[1]][3])) ),
"Zusammengang zwischen Interesse an Mathematik und Studienfach",
list("Pearson Kontingenzindex" = (paste(ausgabe[[2]][1], " => ", interpret[[2]][1])),
"Korrigierte Pearson Kontingenzindex"  = (paste(ausgabe[[2]][2], " => ", interpret[[2]][2])),
"Crammers Kontingenzindex" = (paste(ausgabe[[2]][3], " => ", interpret[[2]][3])) ),
"Zusammengang zwischen Interesse an Programmieren und Studienfach",
list("Pearson Kontingenzindex" = (paste(ausgabe[[3]][1], " => ", interpret[[3]][1])),
"Korrigierte Pearson Kontingenzindex"  = (paste(ausgabe[[3]][2], " => ", interpret[[3]][2])),
"Crammers Kontingenzindex" = (paste(ausgabe[[3]][3], " => ", interpret[[3]][3])) ),
"Korrelation zwischen Interesse an Mathematik und Interesse an Programmieren",
list("Spearman Rangkorellationskoeffizient" = paste(rangkor[1], " => ", interpret_rangcor[1]),
"Kendall`sche Rangkorellationskoeffizient" = paste(rangkor[2], " => ", interpret_rangcor[2]),
"Pearson Korellationskoeffizient" = paste(rangkor[3], " => ", interpret_rangcor[3]))
))
}
#d)
#Eine Funktion, die geeignete deskriptive bivariate Statistiken f√É¬ºr den Zusammengang
#zwischen einer metrischen und einer dichotomen Variablen berechnet und ausgibt
#Eingabe: Data Frame, von Interesse sind Spalten Alter(numeric), Mathe_LK(factor)
#Ausgabe: eine Liste mit einer Tabelle zur Veranschaulichung der Daten und die zugeh√É¬∂rigen Punktbiseriale Korrelation
#die einzige Zusammenhangsma√É¬ü. die die Zusammenhang zwischen einer metrischen und einer
#dichotomen Variablen berechnet und ausgibt, ist die Punktbiseriale Korrelation
dfunktion <- function(x){
#die Zusammenhang als Table zwischen Alter und ob man in der Schule Mathe-LK hatte oder nicht
table <- table(x$Mathe_LK,x$Alter)
Alter<-x$Alter
#Da die zweite vektor numeric  sein muss
Mathe_LK<-as.numeric(x$Mathe_LK)
# diese R funktion lifert uns die punktbiseriale Korrelationskoeffizient
Punktbiseriale_Korrelation <- cor.test(Alter, Mathe_LK)
return(list(table,Punktbiseriale_Korrelation))
}
#e)
#Eine Funktion fuer die Beschreibung verschiedene ordinale Variablen
#Eingabe: Data Frame, von interesse sind Spalten Alter(Numeric), Interesse_an_Mathematik(numeric),
#Interesse_an_Programmieren(numeric)
#ausgabe: eine Liste mit 3 verschiedene Verteilungen der Daten als Kategorien:
#1: Verteilung der Studenten in Uebereinstimmung mit deren Alter
#2: Verteilung der Studenten, die mathe studieren, in Uebereinstimmung mit wie viel sie es magen
#3: Verteilung der Studenten, die Informatik studieren,  in Uebereinstimmung mit viel sie es magen
#Die  Funtion liefert uns in prozentanteil, ob die Studenten jung oder alt sind und wieviel Studenten, die
#mathe/Informatik studieren, eigentlich ihre Studienfach magen.
#Erstellung der Funktion
kategorien <- function(x){
#Die Verteilung der Studenten in 3 Kategorien in Ueberstimmung mit deren Alter, und sie als Vektor speichern
alterkategorisiert = c(length(x$Alter[x$Alter<=20]),
length(x$Alter[x$Alter>20 & x$Alter<=26]),
length(x$Alter[x$Alter>26]))
#Namen zum Vektor geben
names(alterkategorisiert)= c("jung","zwichenstufe","alt")
#Der Vektor als data frame umwandeln
alterdf = data.frame(alterkategorisiert)
alterdf_t = as.data.frame(t(as.matrix(alterdf)))
#Wie viele Studenten informatik studieren
anzahlinfo = length(x$Studienfach[x$Studienfach == "Informatik"])
#Wie Viele Studenten Mathe studieren
anzahlmathe= length(x$Studienfach[x$Studienfach == "Mathe"])
#Die Studenten, die Mathe studieren in 3 Kategorien verteilen in Ueberstimmung mit wie viel sie Mathe magen.
mathekategorisiert = c(length(x$Interesse_an_Mathematik[x$Interesse_an_Mathematik <= 2 & x$Studienfach=="Mathe"]),
length(x$Interesse_an_Mathematik[(x$Interesse_an_Mathematik ==3 | x$Interesse_an_Mathematik==4) & x$Studienfach=="Mathe"] ),
length(x$Interesse_an_Mathematik[x$Interesse_an_Mathematik>=5 & x$Studienfach=="Mathe"]))
#Dies Vektor benennen
names(mathekategorisiert) = c("niedrig","mittel","hoch")
#Dieselbe Verteilung aber in Prozenanteil
mathekategorisiert_pro = c(((length(x$Interesse_an_Mathematik[x$Interesse_an_Mathematik <= 2 & x$Studienfach=="Mathe" ])*100)/anzahlmathe),
((length(x$Interesse_an_Mathematik[(x$Interesse_an_Mathematik ==3 | x$Interesse_an_Mathematik==4)& x$Studienfach=="Mathe"])*100)/anzahlmathe),
((length(x$Interesse_an_Mathematik[x$Interesse_an_Mathematik>=5& x$Studienfach=="Mathe"])*100)/anzahlmathe))
names(mathekategorisiert_pro) = c("niedrig","mittel","hoch")
#die normale Verteilung sowie die mit dem Prozentanteil als data frame umwandeln
mathedf = data.frame(mathekategorisiert,mathekategorisiert_pro)
mathedf_t = as.data.frame(t(as.matrix(mathedf)))
#Informatik is Analog zu mathe
infokategorisiert = c(length(x$Interesse_an_Programmieren[x$Interesse_an_Programmieren <= 2 & x$Studienfach=="Informatik"]),
length(x$Interesse_an_Programmieren[(x$Interesse_an_Programmieren==3 | x$Interesse_an_Programmieren==4) & x$Studienfach=="Informatik"] ),
length(x$Interesse_an_Programmieren[x$Interesse_an_Programmieren>=5 & x$Studienfach=="Informatik"]))
names(infokategorisiert) = c("niedrig","mittel","hoch")
infokategorisiert_pro = c(((length(x$Interesse_an_Programmieren[x$Interesse_an_Programmieren <= 2 & x$Studienfach=="Informatik" ])*100)/anzahlinfo),
((length(x$Interesse_an_Programmieren[(x$Interesse_an_Programmieren ==3 | x$Interesse_an_Programmieren==4)& x$Studienfach=="Informatik"])*100)/anzahlinfo),
((length(x$Interesse_an_Programmieren[x$Interesse_an_Programmieren>=5& x$Studienfach=="Informatik"])*100)/anzahlinfo))
names(infokategorisiert_pro) = c("niedrig","mittel","hoch")
infodf = data.frame(infokategorisiert,infokategorisiert_pro)
infodf_t= as.data.frame(t(as.matrix(infodf)))
return(list(alterdf_t,mathedf_t,infodf_t))
}
#beispiel
##beispiel
##3b))
#Funktion fuer die Beschreibung von kategorialen Variablen
#Eingabe: Data Frame, von interesse sind Spalten Studienfach (ja\nein) und Mathe LK
#Ausgabe: eine Liste mit 2  verschiedene Verteilungen der Daten als Kategorien:
#1: Verteilung der Studenten ,die zwischen Statistik√¢¬Ä¬ú, √¢¬Ä¬ûData Science√¢¬Ä¬ú, √¢¬Ä¬ûMathe√¢¬Ä¬ú und √¢¬Ä¬ûInformatik√¢¬Ä¬ú,ihr Studienfach ausw√É¬§hlen.
#2: Verteilung der Studenten,die ja oder nein Mathe-LK gehabt hatte.
##Erstellung der Funktion
MYFUNKTION <- function(x){if(x=studienfach)
##zunaechst meiner ausgewaehlten Reihenfolge
studienfach <- factor(studienfach,levels = c("Statistik","Data Science","Mathe","Informatik"))
## Absolute Hauefigkeit (absH)
absH <- table(studienfach)
## Relativ Hauefigkeit (relH)
relH <- table(studienfach)/length(studienfach)
##Anteil als Prozentsaetze (proz)
proz <- relH * 100
##ich wollte alles ,so in einer Tabelle zusammenfassen ,damit es schoen aussieht
relH <- round(relH,digits = 3)
proz <- round(proz,digits = 0)
studienfachtyp <- cbind(absH,relH,proz)
## Ein Balkendiagramm
barplot(studienfachtyp[1:3],beside = TRUE
+legend = rownames(studienfachtyp),ylim = C(0,100))
if(x=Mathe-Lk)
##zunaechst meiner ausgewaehlten Reihenfolge
Mathe-Lk <- factor(Mathe-Lk,levels = c("ja","nein"))
## Absolute Hauefigkeit (absH)
absH <- table(Mathe-Lk)
## Relativ Hauefigkeit (relH)
relH <- table(Mathe-Lk)/length(studienfach)
##Anteil als Prozentsaetze (proz)
proz <- relH * 100
##ich wollte alles ,so in einer Tabelle zusammenfassen ,damit es schoen aussieht
relH <- round(relH,digits = 3)
proz <- round(proz,digits = 0)
Mathe-Lktyp <- cbind(absH,relH,proz)
## Ein Balkendiagramm
barplot(studienfachtyp[1:3],beside = TRUE
+legend = rownames(Mathe-Lktyp),ylim = C(0,100))
}
#f)
#Funktion fuer Visualisation von kategorielen Variablen
#Datensatz ablesen
Data <- data.frame(read.csv("Datensatz.csv"))
#Passende Vektoren extrahieren
Studienfach <- Studienfach(Data)
Interesse_an_Mathematik <- Interesse_an_Mathematik(Data)
Mathe_LK <- as.vector(Mathe_LK(Data))
#Eingabe: s, i, m Vektoren die visualisiert werden
#Ausgabe: Mosaikplot
#Funktion stellt Variable Mathe_LK, Interesse_an_Mathematik und Studienfach zusammen
visualisation <- function(s,i,m){
mosaic(~ Studienfach + Interesse_an_Mathematik+Mathe_LK,main = "Beziehung zwischen Studienfach, Interesse an Mathematok und Vorhandensein von Mathe LK", highlighting = "Mathe_LK", highlighting_fill = c("lightblue", "pink"),
direction = c("v","h","v"))
}
visualisation(Studienfach,Interesse_an_Mathematik,Mathe_LK)
